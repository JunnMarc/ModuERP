@namespace ModuERP.Components
@inherits LayoutComponentBase

@using MudBlazor
@using ModuERP.Core.Interfaces
@using ModuERP.Core.Loader

@inject IAuthService AuthService
@inject NavigationManager Nav

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Class="h-100 bg-light">
    @if (AuthService.IsAuthenticated)
    {
        <!-- Sidebar :) -->
        <MudDrawer @bind-Open="_drawerOpen"
                   Variant="DrawerVariant.Responsive"
                   ClipMode="DrawerClipMode.Always"
                   Width="250px"
                   Class="sidebar-custom">
            <div class="d-flex flex-column h-100">
                <!-- Logo -->
                <div class="px-4 py-3 border-bottom">
                    <MudText Typo="Typo.h6" Class="fw-bold text-primary">ModuERP</MudText>
                </div>

                <!-- Navigation -->
                <div class="flex-grow-1 overflow-auto py-2">
                    <MudNavMenu Dense="true" Class="px-2">
                        <!-- Static links -->
                        <MudNavLink Href="/dashboard"
                                    Icon="@Icons.Material.Filled.Dashboard"
                                    Match="NavLinkMatch.All"
                                    Class="nav-link-custom">
                            Dashboard
                        </MudNavLink>
                        <MudNavLink Href="/users"
                                    Icon="@Icons.Material.Filled.Group"
                                    Class="nav-link-custom">
                            Users
                        </MudNavLink>
                        <MudNavLink Href="/settings"
                                    Icon="@Icons.Material.Filled.Settings"
                                    Class="nav-link-custom">
                            Settings
                        </MudNavLink>

                        <!-- Dynamic subsystem buttons -->
                        @if (ModuleLoader.Subsystems?.Any() == true)
                        {
                            <div class="px-3 py-2 text-muted">
                                <MudText Typo="Typo.overline">Subsystems</MudText>
                            </div>
                            @foreach (var subsystem in ModuleLoader.Subsystems)
                            {
                                <MudNavLink Href="@subsystem.Route"
                                            Icon="@subsystem.Icon"
                                            Class="nav-link-custom">
                                    @subsystem.Name
                                </MudNavLink>
                            }
                        }
                    </MudNavMenu>
                </div>

                <!-- User Profile -->
                <div class="border-top p-3">
                    <MudMenu OffsetY="true" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomCenter">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Text" Class="w-100 justify-start px-2 py-1 user-menu-btn">
                                <MudAvatar Size="Size.Small" Class="me-2" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                                </MudAvatar>
                                <div class="d-flex flex-column text-start">
                                    <MudText Typo="Typo.body2" Class="fw-medium">@AuthService.CurrentUser</MudText>
                                    <MudText Typo="Typo.caption" Class="text-muted">Administrator</MudText>
                                </div>
                            </MudButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem OnClick="@GoToSettings" Class="menu-item-custom">
                                <MudIcon Icon="@Icons.Material.Filled.Settings" Class="me-2" /> Settings
                            </MudMenuItem>
                            <MudMenuItem OnClick="Logout" Class="menu-item-custom">
                                <MudIcon Icon="@Icons.Material.Filled.Logout" Class="me-2" /> Logout
                            </MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </div>
            </div>
        </MudDrawer>
    }

    <!-- Main Content Area -->
    <MudMainContent Class="main-content">
        <!-- Top Bar -->
        <MudAppBar Elevation="1" Color="Color.Default" Class="app-bar-custom">
            <div class="d-flex align-items-center w-100">
                @if (AuthService.IsAuthenticated)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                   OnClick="@(() => _drawerOpen = !_drawerOpen)"
                                   Color="Color.Inherit"
                                   Class="me-2" />
                }
                <MudText Typo="Typo.h6" Class="fw-bold">@_currentPageTitle</MudText>
                <div class="ms-auto d-flex align-items-center">

                    <!-- Notifications (added soon) -->
                    <MudMenu Class="me-2">
                        <ActivatorContent>
                            <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" />
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem>Notification 1</MudMenuItem>
                            <MudMenuItem>Notification 2</MudMenuItem>
                        </ChildContent>
                    </MudMenu>

                    <!-- User avatar (mobile) -->
                    <MudAvatar Size="Size.Small" Color="Color.Primary" Class="d-md-none">
                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                    </MudAvatar>
                </div>
            </div>
        </MudAppBar>

        <!-- Page Content -->
        <div class="page-content p-3">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

<style>
    @@import url('https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');

    .sidebar-custom {
        border-right: 1px solid #e2e8f0;
        background-color: #f8fafc;
        box-shadow: none !important;
    }

    .nav-link-custom {
        border-radius: 0.375rem;
        margin: 0.125rem 0.25rem;
        transition: all 0.2s ease;
        color: #64748b;
    }

        .nav-link-custom:hover {
            background-color: #e2e8f0;
            color: #334155;
        }

        .nav-link-custom.mud-nav-link-active {
            background-color: #3b82f6;
            color: white;
        }

    .app-bar-custom {
        border-bottom: 1px solid #e2e8f0;
        background-color: rgba(20, 30, 255, 0.8) !important;
        backdrop-filter: blur(8px);
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06) !important;
    }

    .main-content {
        background-color: #f1f5f9;
    }

    .page-content {
        margin-top: 64px;
        min-height: calc(100vh - 64px);
    }

    .user-menu-btn {
        border-radius: 0.5rem;
        transition: all 0.2s ease;
    }

        .user-menu-btn:hover {
            background-color: #e2e8f0;
        }

    .menu-item-custom {
        border-radius: 0.375rem;
        margin: 0.125rem;
    }

        .menu-item-custom:hover {
            background-color: #f1f5f9;
        }

    .search-container {
        width: 250px;
    }

    .search-field .mud-input-root {
        background-color: white;
        border-radius: 0.375rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 960px) {
        .search-container {
            width: 200px;
        }
    }

    @@media (max-width: 600px) {
        .search-container {
            display: none;
        }

        .page-content {
            padding: 1rem !important;
        }
    }
</style>

@code {
    private bool _drawerOpen = true;
    private string _currentPageTitle = "Dashboard";
    private string _searchQuery = "";

    protected override void OnInitialized()
    {
        AuthService.OnAuthStateChanged += HandleAuthChange;
        HandleAuthChange();

        // Update page title based on current route
        UpdatePageTitle();
    }

    protected override void OnParametersSet()
    {
        UpdatePageTitle();
    }

    private void UpdatePageTitle()
    {
        var uri = new Uri(Nav.Uri);
        var path = uri.AbsolutePath.ToLowerInvariant();

        _currentPageTitle = path switch
        {
            "/dashboard" => "Dashboard",
            "/users" => "Users",
            "/settings" => "Settings",
            _ => ModuleLoader.Subsystems?.FirstOrDefault(s =>
                s.Route?.ToLowerInvariant() == path)?.Name ?? "ModuERP"
        };
    }

    private void HandleAuthChange()
    {
        var uri = new Uri(Nav.Uri);
        var path = uri.AbsolutePath.ToLowerInvariant();

        bool isLoginPage = path == "/login";
        bool isDashboard = path == "/dashboard";

        if (!AuthService.IsAuthenticated && !isLoginPage)
        {
            Nav.NavigateTo("/login", forceLoad: false);
        }
        else if (AuthService.IsAuthenticated && (isLoginPage || path == "/"))
        {
            if (!isDashboard)
                Nav.NavigateTo("/dashboard", forceLoad: false);
        }
    }

    private void GoToSettings() => Nav.NavigateTo("/settings");

    private void Logout()
    {
        AuthService.Logout();
        Nav.NavigateTo("/login", forceLoad: false);
    }
}